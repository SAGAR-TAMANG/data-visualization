/**
 * chartjs-chart-geo
 * https://github.com/sgratzl/chartjs-chart-geo
 *
 * Copyright (c) 2019-2023 Samuel Gratzl <sam@sgratzl.com>
 */

import { CoreScaleOptions, Scale, CartesianScaleOptions, ChartArea, LinearScaleOptions, LinearScale, LogarithmicScaleOptions, LogarithmicScale, ChartType, ScriptableAndArrayOptions, CommonHoverOptions, ScriptableContext, BarOptions, Element, VisualElement, ChartTypeRegistry, DatasetController, ChartDataset, UpdateMode, AnimationOptions, ControllerDatasetOptions, Chart, ChartItem, ChartConfiguration, PointElement, PointProps, PointOptions, PointHoverOptions } from 'chart.js';
import { GeoProjection, ExtendedFeatureCollection, GeoGeometryObjects, ExtendedGeometryCollection, ExtendedFeature } from 'd3-geo';
export { geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEquidistant, geoConicConformal, geoConicEqualArea, geoConicEquidistant, geoEqualEarth, geoEquirectangular, geoGnomonic, geoMercator, geoNaturalEarth1, geoOrthographic, geoStereographic, geoTransverseMercator } from 'd3-geo';
import * as topojsonClient from 'topojson-client';
export { topojsonClient as topojson };

interface IProjectionScaleOptions extends CoreScaleOptions {
    projection: GeoProjection | 'azimuthalEqualArea' | 'azimuthalEquidistant' | 'gnomonic' | 'orthographic' | 'stereographic' | 'equalEarth' | 'albers' | 'albersUsa' | 'conicConformal' | 'conicEqualArea' | 'conicEquidistant' | 'equirectangular' | 'mercator' | 'transverseMercator' | 'naturalEarth1';
    projectionScale: number;
    projectionOffset: [number, number];
    padding: number | {
        top: number;
        left: number;
        right: number;
        bottom: number;
    };
}
declare class ProjectionScale extends Scale<IProjectionScaleOptions> {
    private outlineBounds;
    private oldChartBounds;
    constructor(cfg: any);
    computeBounds(outline: ExtendedFeatureCollection): void;
    computeBounds(outline: GeoGeometryObjects): void;
    computeBounds(outline: ExtendedGeometryCollection): void;
    static readonly id = "projection";
}
declare module 'chart.js' {
    interface ProjectionScaleTypeRegistry {
        projection: {
            options: IProjectionScaleOptions;
        };
    }
    interface ScaleTypeRegistry extends ProjectionScaleTypeRegistry {
    }
}

interface ILegendScaleOptions extends CartesianScaleOptions {
    display: boolean;
    property: string;
    legend: {
        position: 'left' | 'right' | 'top' | 'bottom' | 'top-left' | 'top-right' | 'top-right' | 'bottom-right' | 'bottom-left' | {
            x: number;
            y: number;
        };
        align: 'left' | 'right' | 'top' | 'bottom';
        length: number;
        width: number;
        indicatorWidth: number;
        margin: number | ChartArea;
    };
}
declare class LegendScale<O extends ILegendScaleOptions & LinearScaleOptions> extends LinearScale<O> {
    protected _getNormalizedValue(v: number): number | null;
}
declare class LogarithmicLegendScale<O extends ILegendScaleOptions & LogarithmicScaleOptions> extends LogarithmicScale<O> {
    protected _getNormalizedValue(v: number): number | null;
    protected _drawIndicator(): void;
}

interface IColorScaleOptions extends ILegendScaleOptions {
    interpolate: ((normalizedValue: number) => string) | 'blues' | 'brBG' | 'buGn' | 'buPu' | 'cividis' | 'cool' | 'cubehelixDefault' | 'gnBu' | 'greens' | 'greys' | 'inferno' | 'magma' | 'orRd' | 'oranges' | 'pRGn' | 'piYG' | 'plasma' | 'puBu' | 'puBuGn' | 'puOr' | 'puRd' | 'purples' | 'rainbow' | 'rdBu' | 'rdGy' | 'rdPu' | 'rdYlBu' | 'rdYlGn' | 'reds' | 'sinebow' | 'spectral' | 'turbo' | 'viridis' | 'warm' | 'ylGn' | 'ylGnBu' | 'ylOrBr' | 'ylOrRd';
    missing: string;
    quantize: number;
}
declare class ColorScale extends LegendScale<IColorScaleOptions & LinearScaleOptions> {
    static readonly id = "color";
}
declare class ColorLogarithmicScale extends LogarithmicLegendScale<IColorScaleOptions & LogarithmicScaleOptions> {
    private interpolate;
    protected _drawIndicator(): void;
    static readonly id = "colorLogarithmic";
}
declare module 'chart.js' {
    interface ColorScaleTypeRegistry {
        color: {
            options: IColorScaleOptions & LinearScaleOptions;
        };
        colorLogarithmic: {
            options: IColorScaleOptions & LogarithmicScaleOptions;
        };
    }
    interface ScaleTypeRegistry extends ColorScaleTypeRegistry {
    }
}

interface ISizeScaleOptions extends ILegendScaleOptions {
    range: [number, number];
    mode: 'radius' | 'area';
    missing: number;
}
declare class SizeScale extends LegendScale<ISizeScaleOptions & LinearScaleOptions> {
    static readonly id = "size";
}
declare class SizeLogarithmicScale extends LogarithmicLegendScale<ISizeScaleOptions & LogarithmicScaleOptions> {
    static readonly id = "sizeLogarithmic";
}
declare module 'chart.js' {
    interface SizeScaleTypeRegistry {
        size: {
            options: ISizeScaleOptions & LinearScaleOptions;
        };
        sizeLogarithmic: {
            options: ISizeScaleOptions & LogarithmicScaleOptions;
        };
    }
    interface ScaleTypeRegistry extends SizeScaleTypeRegistry {
    }
}

interface IGeoFeatureOptions extends Omit<BarOptions, 'borderWidth'>, Record<string, unknown> {
    borderWidth: number;
    outlineBackgroundColor: string | null;
    outlineBorderColor: string;
    outlineBorderWidth: number;
    graticuleBorderColor: string;
    graticuleBorderWidth: number;
}
type Feature = any;
interface IGeoFeatureProps {
    x: number;
    y: number;
}
declare class GeoFeature extends Element<IGeoFeatureProps, IGeoFeatureOptions> implements VisualElement {
    static id: string;
}
declare module 'chart.js' {
    interface ElementOptionsByType<TType extends ChartType> {
        geoFeature: ScriptableAndArrayOptions<IGeoFeatureOptions & CommonHoverOptions, ScriptableContext<TType>>;
    }
}

declare class GeoController<TYPE extends keyof ChartTypeRegistry, TElement extends Element & VisualElement> extends DatasetController<TYPE, TElement, GeoFeature> {
    getGeoDataset(): ChartDataset<'choropleth' | 'bubbleMap'> & IGeoControllerDatasetOptions;
    getGeoOptions(): IGeoChartOptions;
    getProjectionScale(): ProjectionScale;
    linkScales(): void;
    showOutline(): IGeoChartOptions['showOutline'];
    clipMap(): IGeoChartOptions['clipMap'];
    getGraticule(): IGeoChartOptions['showGraticule'];
    update(mode: UpdateMode): void;
    resolveOutline(): any;
    showGraticule(): void;
    draw(): void;
}
interface IGeoChartOptions {
    outline: any[];
    showOutline: boolean;
    showGraticule: boolean | {
        stepMajor: [number, number];
        stepMinor: [number, number];
    };
    clipMap: boolean | 'outline' | 'graticule' | 'outline+graticule' | 'items';
}
interface IGeoControllerDatasetOptions extends IGeoChartOptions, ScriptableAndArrayOptions<IGeoFeatureOptions, ScriptableContext<'choropleth' | 'bubbleMap'>>, AnimationOptions<'choropleth' | 'bubbleMap'> {
    xAxisID?: string;
    yAxisID?: string;
    rAxisID?: string;
    iAxisID?: string;
    vAxisID?: string;
}
interface IGeoDataPoint {
    feature: ExtendedFeature;
    center?: {
        longitude: number;
        latitude: number;
    };
}

declare class ChoroplethController extends GeoController<'choropleth', GeoFeature> {
    initialize(): void;
    linkScales(): void;
    _getOtherScale(scale: Scale): Scale;
    parse(start: number, count: number): void;
    updateElements(elems: GeoFeature[], start: number, count: number, mode: UpdateMode): void;
    indexToColor(index: number): string;
    static readonly id = "choropleth";
}
interface IChoroplethControllerDatasetOptions extends ControllerDatasetOptions, IGeoChartOptions, ScriptableAndArrayOptions<IGeoFeatureOptions, ScriptableContext<'choropleth'>>, ScriptableAndArrayOptions<CommonHoverOptions, ScriptableContext<'choropleth'>>, AnimationOptions<'choropleth'> {
}
interface IChoroplethDataPoint extends IGeoDataPoint {
    value: number;
}
declare module 'chart.js' {
    interface ChartTypeRegistry {
        choropleth: {
            chartOptions: IGeoChartOptions;
            datasetOptions: IChoroplethControllerDatasetOptions;
            defaultDataPoint: IChoroplethDataPoint;
            scales: keyof (ProjectionScaleTypeRegistry & ColorScaleTypeRegistry);
            metaExtensions: Record<string, never>;
            parsedDataType: {
                r: number;
            };
        };
    }
}
declare class ChoroplethChart<DATA extends unknown[] = IGeoDataPoint[], LABEL = string> extends Chart<'choropleth', DATA, LABEL> {
    static id: string;
    constructor(item: ChartItem, config: Omit<ChartConfiguration<'choropleth', DATA, LABEL>, 'type'>);
}

type MyPointElement = PointElement & Element<PointProps, PointOptions & PointHoverOptions & Record<string, unknown>>;
declare class BubbleMapController extends GeoController<'bubbleMap', MyPointElement> {
    initialize(): void;
    linkScales(): void;
    _getOtherScale(scale: Scale): Scale;
    parse(start: number, count: number): void;
    updateElements(elems: MyPointElement[], start: number, count: number, mode: UpdateMode): void;
    indexToRadius(index: number): number;
    static readonly id = "bubbleMap";
}
interface IBubbleMapDataPoint {
    longitude: number;
    latitude: number;
    x?: number;
    y?: number;
    value: number;
}
interface IBubbleMapControllerDatasetOptions extends ControllerDatasetOptions, IGeoChartOptions, ScriptableAndArrayOptions<IGeoFeatureOptions, ScriptableContext<'bubbleMap'>>, ScriptableAndArrayOptions<CommonHoverOptions, ScriptableContext<'bubbleMap'>>, AnimationOptions<'bubbleMap'> {
}
declare module 'chart.js' {
    interface ChartTypeRegistry {
        bubbleMap: {
            chartOptions: IGeoChartOptions;
            datasetOptions: IBubbleMapControllerDatasetOptions;
            defaultDataPoint: IBubbleMapDataPoint;
            scales: keyof (ProjectionScaleTypeRegistry & SizeScaleTypeRegistry);
            metaExtensions: Record<string, never>;
            parsedDataType: {
                r: number;
                x: number;
                y: number;
            };
        };
    }
}
declare class BubbleMapChart<DATA extends unknown[] = IBubbleMapDataPoint[], LABEL = string> extends Chart<'bubbleMap', DATA, LABEL> {
    static id: string;
    constructor(item: ChartItem, config: Omit<ChartConfiguration<'bubbleMap', DATA, LABEL>, 'type'>);
}

export { BubbleMapChart, BubbleMapController, ChoroplethChart, ChoroplethController, ColorLogarithmicScale, ColorScale, Feature, GeoController, GeoFeature, IBubbleMapControllerDatasetOptions, IBubbleMapDataPoint, IChoroplethControllerDatasetOptions, IChoroplethDataPoint, IColorScaleOptions, IGeoChartOptions, IGeoControllerDatasetOptions, IGeoDataPoint, IGeoFeatureOptions, IGeoFeatureProps, IProjectionScaleOptions, ISizeScaleOptions, ProjectionScale, SizeLogarithmicScale, SizeScale };
//# sourceMappingURL=index.d.ts.map
